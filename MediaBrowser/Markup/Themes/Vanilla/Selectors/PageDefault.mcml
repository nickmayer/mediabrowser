<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
      xmlns:addin="assembly://Microsoft.MediaCenter/Microsoft.MediaCenter.Hosting"
      xmlns:cor="assembly://MsCorLib/System"
	    xmlns:a="assembly://MediaBrowser/MediaBrowser"
      xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"
      xmlns:s="file://Styles_DoNotEdit.mcml"
      xmlns:f="file://Fonts_DoNotEdit.mcml"
      xmlns:np="resx://MediaBrowser/MediaBrowser.Resources/NowPlayingViewport"
	    xmlns:i="resx://MediaBrowser/MediaBrowser.Resources/Images"
      xmlns:in="resx://MediaBrowser/MediaBrowser.Resources/InfoMarquee"
	    xmlns:bd="resx://MediaBrowser/MediaBrowser.Resources/Backdrop"
      xmlns:sounds="resx://MediaBrowser/MediaBrowser.Resources/Sounds"
      xmlns:an="resx://MediaBrowser/MediaBrowser.Resources/Animations"
      xmlns:pda="resx://MediaBrowser/MediaBrowser.Resources/PageDetailAreaVanilla"
      xmlns:vcm="resx://MediaBrowser/MediaBrowser.Resources/VanillaPopupContextMenu"
      xmlns:vpp="resx://MediaBrowser/MediaBrowser.Resources/VanillaPopupPlay"
      xmlns:pvm="resx://MediaBrowser/MediaBrowser.Resources/VanillaPopupViewMenu"
      xmlns:prm="resx://MediaBrowser/MediaBrowser.Resources/VanillaPopupRadioMenu"
      xmlns:vsb="resx://MediaBrowser/MediaBrowser.Resources/VanillaSimpleButton"
      xmlns:vmb="resx://MediaBrowser/MediaBrowser.Resources/VanillaMenuButton"
      xmlns:vnpv="resx://MediaBrowser/MediaBrowser.Resources/VanillaNPV"
      xmlns:vi="resx://MediaBrowser/MediaBrowser.Resources/VanillaImages"
      xmlns:vpi="resx://MediaBrowser/MediaBrowser.Resources/VanillaPopupInfo"
      xmlns:pci="resx://MediaBrowser/MediaBrowser.Resources/PCIndicatorButton"
      xmlns:me="Me"
	  >

  <UI Name="Page">
    <Properties>
      <a:Application     Name="Application" Application="$Required"/>
      <lib:FolderModel   Name="Folder" FolderModel="$Required"/>
      <IntRangedValue    Name="SortOrderIndex" MinValue ="0" MaxValue="999"/>
      <FormLayoutInput   Name="FullScreen" Bottom="Parent,1" Left="Parent,0" Right="Parent,1" Top="Parent,0"/>
      <AnchorLayoutInput Name="NPVRight" Right="Parent,1" Top="Parent,0"/>
    </Properties>

    <Locals>
      <a:Config Name="Config" Config="[Application.Config]"/>

      <lib:Item Name="SelectedItem"         Item="[Folder.SelectedChild]"/>
      <lib:Item Name="PreSelectedItem"      Item="[Folder.SelectedChild]"/>
      <lib:Item Name="PreviousSelectedItem" Item="[Folder.SelectedChild]"/>
      <lib:Item Name="BlankItem"            Item="[Folder.BlankItem]"/>

      <Timer Name="RefocusViewTimer"    Interval="500"  AutoRepeat="false"/>
      <Timer Name="FullDetailsTimer"    Interval="300"  AutoRepeat="false"/>
      <Timer Name="HideFindAsYouType"   Interval="3000" AutoRepeat="false"/>
      <Timer Name="ClockTimer"          Interval="500"  AutoRepeat="true"  Enabled="true"/>
      <Timer Name="MicrosoftSucksTimer" Interval="1000" AutoRepeat="false" Enabled="true"/>
      
      <IntRangedValue Name="SelectedIndex" Value="0"/>
      <cor:Int32 Name="CounterValue" Int32="0" />
      <cor:Boolean  Name="CanPlay"       Boolean="false" />
      <cor:Boolean  Name="DetailShown"   Boolean="true"/>
      <cor:String   Name="NavigatorText" String="Test"/>
      <cor:DateTime Name="CurrentTime"/>

      <IntRangedValue Name="Hour"/>

      <addin:AddInHost Name="AddInHost" />

      <KeyHandler Name="InfoKey" Key="D3" Handle="true" Modifiers="Shift" HandlerStage="Bubbled"/>
      <ShortcutHandler Name="RecordBtn" Handle="true" Shortcut="Record" HandlerStage="Bubbled"/>
      <TypingHandler Name="TypingHandler" HandlerStage="Bubbled" TypingPolicy="TripleTap"  >
        <EditableText>
          <EditableText Value="" />
        </EditableText>
      </TypingHandler>

      <Command Name="ClosePopupPlay"/>
      <Command Name="NowPlayingPanel"/>
      <Command Name="ShowViewConfiguration" />
      <Command Name="CloseViewConfiguration" />
      <Command Name="ShowSortConfiguration" />
      <Command Name="CloseSortConfiguration" />
      <Command Name="ShowIndexConfiguration" />
      <Command Name="CloseIndexConfiguration" />
      <Command Name="CloseContextMenu" />
      <Command Name="Popup"/>
      <Command Name="Info"/>
      <BooleanChoice Name="Typy" Value="true"/>
      <BooleanChoice Name="TopBarHasFocus"    Value="false" />
      <BooleanChoice Name="LeftWallHasFocus"  Value="false" />
      <BooleanChoice Name="RightWallHasFocus" Value="false" />
      <BooleanChoice Name="BottomWallHasFocus" Value="false" />
      <AnchorLayoutInput Name="LayoutTopBarShow" Top="Parent,0,-5"   />
      <AnchorLayoutInput Name="LayoutTopBarHide" Top="Parent,0,-135" />
      <AnchorLayoutInput Name="LayoutLeftWall" Left="Parent,0,-135"   />
    </Locals>

    <Rules>

      <Changed Source="[MicrosoftSucksTimer.Tick]">
        <Actions>
          <Set Target="[MicrosoftSucksTimer.Enabled]" Value="false" />          
          <Invoke Target="[ViewPanel.NavigateInto]" />
          <Set Target="[TheTopBar.Visible]" Value="true" />
        </Actions>
      </Changed>
      
      <!-- Clock Timer -->
      <Changed Source="[ClockTimer.Tick]" InitialEvaluate="true">
        <Actions>
          <Set Target="[CurrentTime]" Value="[CurrentTime.Now]"/>
          <Set Target="[Hour.Value]" Value="[CurrentTime.Hour]"/>
          <Set Target="[TimeDisplay.Content]" Value="[CurrentTime]">
            <Transformer>
              <DateTimeTransformer Format="ShortTime"/>
            </Transformer>
          </Set>
        </Actions>
      </Changed>

      <Changed Source="[FullDetailsTimer.Tick]">
        <Actions>
          <Set Target="[SelectedItem]" Value="[PreSelectedItem]"/>
          <Set Target="[PreviousSelectedItem]" Value="[PreSelectedItem]"/>
        </Actions>
      </Changed>

      <Changed Source="[Folder.SelectedChildIndex]" InitialEvaluate="true">
        <Conditions>
          <Equality ConditionOp="NotEquals" Source="[Folder.SelectedChildIndex]" Value="-1"></Equality>
        </Conditions>
        <Actions>
          <Invoke Target="[FullDetailsTimer.Stop]" />
          <Invoke Target="[FullDetailsTimer.Start]" />
          <Set Target="[SelectedItem]"  Value="[BlankItem]" />
          <Set Target="[PreSelectedItem]"  Value="[Folder.SelectedChild]" />
          <Set Target="[SelectedIndex.Value]" Value="[Folder.SelectedChildIndex]"/>
        </Actions>
      </Changed>

      <Changed Source="[Folder.SelectedChildIndex]">
        <Conditions>
          <Equality ConditionOp="Equals" Source="[Folder.SelectedChildIndex]" Value="-1"></Equality>
        </Conditions>
        <Actions>
          <Set Target="[SelectedItem]"  Value="[BlankItem]" />
          <Set Target="[PreSelectedItem]"  Value="[BlankItem]" />
          <Set Target="[PreviousSelectedItem]"  Value="[BlankItem]" />
        </Actions>
      </Changed>

      <Changed Source="[FullDetailsTimer.Tick]">
        <Actions>
          <Set Target="[SelectedItem]"         Value="[PreSelectedItem]"/>
          <Set Target="[PreviousSelectedItem]" Value="[PreSelectedItem]"/>
        </Actions>
      </Changed>

      <Binding Source="[SelectedIndex.Value]" Target="[Folder.SelectedChildIndex]" />
      <Binding Source="[SelectedIndex.Value]" Target="[CounterValue]" >
        <Transformer>
          <MathTransformer Add="1" />
        </Transformer>
      </Binding>


      <Binding Source="[FindAsYouType.Content]" Target="[ShadowLabel.Content]" />
      <Binding Source="[TypingHandler.DisplayValue]" Target="[FindAsYouType.Content]" />
      <Binding Source="[TypingHandler.DisplayValue]" Target="[Folder.TripleTapSelect]" />

      <Changed Source="[TypingHandler.DisplayValue]" >
        <Conditions>
          <Equality Source="[TypingHandler.DisplayValue]" ConditionOp="NotEquals" Value="" />
        </Conditions>
        <Actions>
          <Invoke Target="[HideFindAsYouType.Start]" />
        </Actions>
      </Changed>

      <Changed Source="[TypingHandler.DisplayValue]">
        <Conditions>
          <Equality Source="[TypingHandler.DisplayValue]" ConditionOp="Equals" Value="*" />
        </Conditions>
        <Actions>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
          <Invoke Target="[Popup.Invoke]" />
        </Actions>
      </Changed>

      <Changed Source="[TypingHandler.DisplayValue]">
        <Conditions>
          <Equality Source="[TypingHandler.DisplayValue]" ConditionOp="Equals" Value="#"/>
        </Conditions>
        <Actions>
          <Invoke Target="[Info.Invoke]" />
        </Actions>
      </Changed>
      
      <Changed Source="[HideFindAsYouType.Tick]">
        <Actions>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
        </Actions>
      </Changed>

      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[Config.Theme]" ConditionOp="Equals" Value="Black"/>
          <Equality Source="[Application.Config.ShowThemeBackground]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[MainBG.Content]" Value="image://vi:BackgroundBlack"/>
        </Actions>
      </Rule>

      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[Config.Theme]" ConditionOp="Equals" Value="Default"/>
          <Equality Source="[Application.Config.ShowThemeBackground]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[MainBG.Content]" Value="image://vi:BackgroundDefault"/>
        </Actions>
      </Rule>

      <!-- Context Menu -->
      <Rule>
        <Conditions>
          <Modified Source="[Popup.Invoked]" />
        </Conditions>
        <Actions>
          <Set Target="[ContextMenu.Visible]" Value="true"/>
          <Invoke Target="[ContextMenu.NavigateInto]" />
          <Set Target="[FindAsYouTypePanel.Visible]" Value="false" />
        </Actions>
      </Rule>
      <Changed Source="[CloseContextMenu.Invoked]" >
        <Actions>
          <Invoke Target="[ViewPanel.NavigateInto]" />
          <Set Target="[ContextMenu.Visible]" Value="false" />
          <Set Target="[FindAsYouTypePanel.Visible]" Value="true" />
        </Actions>
      </Changed>

      <Changed Source="[NowPlayingPanel.Invoked]">
        <Actions>
          <Invoke Target="[Application.PlaybackController.GoToFullScreen]"/>
        </Actions>
      </Changed>

      <Rule>
        <Conditions>
          <Equality Source="[Application.PlaybackController.IsStopped]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[TrailerPanel.Visible]" Value="false" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[Application.PlaybackController.IsPlaying]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[TrailerPanel.Visible]" Value="true" />
        </Actions>
      </Rule>

      <Rule>
        <Conditions>
          <Modified Source="[RecordBtn.Invoked]"/>
        </Conditions>
        <Actions>
          <PlaySound Sound="res://ehres!MiniSelect_a.wav" />
          <Invoke Target="[PreSelectedItem.RefreshMetadata]"/>
        </Actions>
      </Rule>

      <Condition Source="[Folder.IsRoot]" ConditionOp="Equals" SourceValue="true" Target="[NowPlayingViewPort.NPVSize]" Value="200,110" />

      
      
      <Binding Target="[PopupPlay.Item]"    Source="[Folder.SelectedChild]" />
      <Binding Target="[PopupPlay.Visible]" Source="[Application.DisplayPopupPlay]" />

      <Rule>
        <Conditions>
          <Equality Source="[Application.DisplayPopupPlay]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[PopupPlay.Visible]" Value="true" />
          <Invoke Target="[PopupPlay.NavigateInto]" />
        </Actions>
      </Rule>

      <Changed Source="[ClosePopupPlay.Invoked]">
        <Actions>
          <Set Target="[Application.DisplayPopupPlay]" Value="false" />
          <PlaySound Sound="sound://sounds:Miniselect" />
          <Set Target="[PopupPlay.Visible]" Value="false"/>
        </Actions>
      </Changed>

      
      <Rule>
        <Conditions>
          <Equality Source="[TopBarHasFocus.Value]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.LayoutInput]" Value="[LayoutTopBarShow]" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[TopBarHasFocus.Value]" ConditionOp="Equals" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.LayoutInput]" Value="[LayoutTopBarHide]" />
        </Actions>
      </Rule>



      <Rule>
        <Conditions>
          <Equality Source="[LeftWallHasFocus.Value]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Invoke Target="[TheTopBar.NavigateInto]" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[RightWallHasFocus.Value]" ConditionOp="Equals" Value="true" />
          <Equality Source="[TrailerPanel.Visible]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[TrailerPanel.NavigateInto]" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[RightWallHasFocus.Value]" ConditionOp="Equals" Value="true" />
          <Equality Source="[TrailerPanel.Visible]" ConditionOp="Equals" Value="false"/>
        </Conditions>
        <Actions>
          <Invoke Target="[TheTopBar.NavigateInto]" />
        </Actions>
      </Rule>

      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[BottomWallHasFocus.Value]" ConditionOp="Equals" Value="true" />
          <Equality Source="[TrailerPanel.Visible]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Invoke Target="[TrailerPanel.NavigateInto]" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[BottomWallHasFocus.Value]" ConditionOp="Equals" Value="true" />
          <Equality Source="[TrailerPanel.Visible]" ConditionOp="Equals" Value="false"/>
        </Conditions>
        <Actions>
          <Invoke Target="[TheTopBar.NavigateInto]" />
        </Actions>
      </Rule>

      
      <!-- Show View Popup Panel -->
      <Changed Source="[ShowViewConfiguration.Invoked]">
        <Actions>
          <Set Target="[ViewConfig.Visible]"  Value="true"/>
          <Set Target="[SortConfig.Visible]"  Value="false"/>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>
      
      <!-- Hide View Popup Panel -->
      <Changed Source="[CloseViewConfiguration.Invoked]">
        <Actions>
          <Set Target="[ViewConfig.Visible]" Value="false"/>
        </Actions>
      </Changed>
      
      <Changed Source="[Folder.DisplayPrefs.ViewType.Chosen]" >
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[RefocusViewTimer.Tick]">
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>
      
      <Changed Source="[Folder.DisplayPrefs.ViewType.Chosen]" >
        <Conditions>
          <Equality Source="[ViewConfig.Visible]" Value="true" />
        </Conditions>
        <Actions>
          <Invoke Target="[RefocusViewTimer.Start]" />
        </Actions>
      </Changed>

      <!-- Show Sort By Popup Panel -->
      <Changed Source="[ShowSortConfiguration.Invoked]">
        <Actions>
          <Set Target="[SortConfig.Visible]"  Value="true"/>
          <Set Target="[ViewConfig.Visible]"  Value="false"/>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[SortConfig.NavigateInto]" />
        </Actions>
      </Changed>
      <!-- Hide Sort By Popup Panel -->
      <Changed Source="[CloseSortConfiguration.Invoked]">
        <Actions>
          <Set Target="[SortConfig.Visible]" Value="false"/>
        </Actions>
      </Changed>
      <!-- Sort By Chosen -->
      <Changed Source="[Folder.DisplayPrefs.SortOrders.Chosen]" >
        <Actions>
          <Set Target="[SortConfig.Visible]" Value="false"/>
        </Actions>
      </Changed>

      <!-- Show Indexed By Popup Panel -->
      <Changed Source="[ShowIndexConfiguration.Invoked]">
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="true"/>
          <Set Target="[ViewConfig.Visible]"  Value="false"/>
          <Set Target="[SortConfig.Visible]"  Value="false"/>
          <Invoke Target="[IndexConfig.NavigateInto]" />          
        </Actions>
      </Changed>
      <!-- Hide Indexed By Popup Panel -->
      <Changed Source="[CloseIndexConfiguration.Invoked]">
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
        </Actions>
      </Changed>
      <!-- Index By Chosen -->
      <Changed Source="[Folder.DisplayPrefs.IndexByChoice.Chosen]" >
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
        </Actions>
      </Changed>


      
      <Changed Source="[Info.Invoked]" >
        <Conditions>
          <Equality Source="[DetailShown]" ConditionOp="Equals" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[SummaryFrame.Visible]"             Value="true"/>
          <Set Target="[DetailShown]"                      Value="true"/>
          <Set Target="[FindAsYouTypePanel.Visible]"       Value="false"/>
          <Set Target="[InfoBackSplash.Alpha]"             Value="0.6"/>
          <Set Target="[TypingHandler.EditableText.Value]" Value=""/>
          <Set Target="[TypingHandler.Value]"              Value=""/>
        </Actions>
      </Changed>
      
      <Changed Source="[Info.Invoked]"  InitialEvaluate="true">
        <Conditions>
          <Equality Source="[DetailShown]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[SummaryFrame.Visible]"             Value="false"/>
          <Set Target="[DetailShown]"                      Value="false"/>
          <Set Target="[FindAsYouTypePanel.Visible]"       Value="true" />
          <Set Target="[InfoBackSplash.Alpha]"             Value="0"/>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
          <Set Target="[TypingHandler.Value]"              Value="" />
        </Actions>
      </Changed>

      
      <!-- Extender -->
      <!--<Changed Source="[InfoKey.Invoked]" InitialEvaluate="true">
        <Conditions>
          <Equality Source="[DetailShown]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[SummaryFrame.Visible]"             Value="false"/>
          <Set Target="[DetailShown]"                      Value="false"/>
          <Set Target="[FindAsYouTypePanel.Visible]"       Value="true" />
          <Set Target="[InfoBackSplash.Alpha]"             Value="0"/>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
          <Set Target="[TypingHandler.Value]"              Value=""/>
        </Actions>
      </Changed>
      <Changed Source="[InfoKey.Invoked]">
        <Conditions>
          <Equality Source="[DetailShown]" ConditionOp="Equals" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[SummaryFrame.Visible]"             Value="true"/>
          <Set Target="[DetailShown]"                      Value="true"/>
          <Set Target="[InfoBackSplash.Alpha]"             Value="0.6"/>
          <Set Target="[FindAsYouTypePanel.Visible]"       Value="false"/>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
          <Set Target="[TypingHandler.Value]"              Value="" />
        </Actions>
      </Changed>-->

      
      <Binding Target="[PopInfoWindow.Item]" Source="[PreSelectedItem]"/>
    </Rules>
    
    <Content>
      <Panel Layout="Form"  Navigation="RememberFocus">
        <Children>
          <Clip Layout="Form" Padding="[Application.Config.OverScanPadding]" Scale="[Application.Config.OverScanScaling]" CenterPointPercent="0.5,0.5,0.5">
            <Animations>
              <Animation Animation="animation://an:PageHide" />
            </Animations>
            <Children>

              <!-- Configuration Menu System -->
              <me:TopBar Name="TheTopBar" Application="[Application]" Folder="[Folder]" InFocus="[TopBarHasFocus]" Visible="false" Views="[ShowViewConfiguration]" Sort="[ShowSortConfiguration]" Index="[ShowIndexConfiguration]"/>

              <!-- Wall Bounces -->
              <me:Wall Name="LeftWall" Application="[Application]" InFocus="[LeftWallHasFocus]">
                <LayoutInput>
                  <AnchorLayoutInput Left="Parent,0,-135"/>
                </LayoutInput>
              </me:Wall>
              <me:Wall Name="RightWall" Application="[Application]" InFocus="[RightWallHasFocus]">
                <LayoutInput>
                  <AnchorLayoutInput Right="Parent,1,135"/>
                </LayoutInput>
              </me:Wall>
              <me:Wall Name="BottomWall" Application="[Application]" InFocus="[BottomWallHasFocus]">
                <LayoutInput>
                  <AnchorLayoutInput Bottom="Parent,1,135"/>
                </LayoutInput>
              </me:Wall>
              
              <!-- View Menu System -->
              <pvm:PopupViewMenu Application="[Application]" Name="ViewConfig"  Visible="false"  Close="[CloseViewConfiguration]"  Prefs="[Folder.DisplayPrefs]"/>
              
              <!-- Sort Menu System -->
              <prm:PopupRadioMenu Application="[Application]" Name="SortConfig"  Visible="false"  Close="[CloseSortConfiguration]"  Choice="[Folder.DisplayPrefs.SortOrders]"/>
              
              <!-- Filtering Menu System -->
              <prm:PopupRadioMenu Application="[Application]" Name="IndexConfig" Visible="false"  Close="[CloseIndexConfiguration]" Choice="[Folder.DisplayPrefs.IndexByChoice]"/>

              <!-- PopupPlay Menu System -->
              <vpp:PopupPlay Name="PopupPlay" Visible="false" Item="[Folder]" Close="[ClosePopupPlay]" Application="[Application]" />

              <!-- Popup Info Box -->
              <Panel Name="SummaryFrame" Layout="Form" Navigation="ContainAll">
                <LayoutInput>
                  <FormLayoutInput Left="Parent,0.15" Top="Parent,0.15" Bottom="Parent,0.85" Right="Parent,0.85"/>
                </LayoutInput>
                <Children>
                  <vpi:PopupInfo Name="PopInfoWindow" Application="[Application]" Item="[PreSelectedItem]"/>
                </Children>
              </Panel>
              <ColorFill Name="InfoBackSplash" Content="Black" Layout="Fill"/>

              <!-- Now Playing View Port -->
              <Panel Name="TrailerPanel" Layout="Anchor" LayoutInput="[NPVRight]" Visible="false"  >
                <Children>
                  <vnpv:LargeNPV Name="NowPlayingViewPort" Command="[NowPlayingPanel]" NPVSize="400,220"/>
                </Children>
              </Panel>

              <!-- Context Menu -->
              <vcm:ContextMenu Name="ContextMenu" Application="[Application]" Close="[CloseContextMenu]" Visible="false" />
 
              <!-- find in list panel - highest Z-Order -->
              <Panel Name="FindAsYouTypePanel" Alpha="1" >
                <LayoutInput>
                  <FormLayoutInput Bottom="Parent,1,-30" Right="Parent,1,-30"/>
                </LayoutInput>
                <Layout>
                  <FlowLayout ItemAlignment="Center"/>
                </Layout>
                <Children>
                  <ColorFill Content="Transparent" Padding="8,0,8,-3" Layout="Anchor">
                    <Children>
                      <Text Name="FindAsYouType" Font="Segoe Media Center Semibold,150" Content="" Color="color://s:FontColorMedium" />
                      <Text Name="ShadowLabel" Content="" Color="255, 0, 0, 0" Font="Segoe Media Center Semibold,150">
                        <LayoutInput>
                          <AnchorLayoutInput Top="FindAsYouType, 0, 2" Left="FindAsYouType, 0, 2"/>
                        </LayoutInput>
                      </Text>
                    </Children>
                  </ColorFill>
                </Children>
              </Panel>

              <!-- RSS Info -->
              <Panel>
                <LayoutInput>
                  <AnchorLayoutInput Bottom="Parent,1,-12"/>
                </LayoutInput>
                <Children>
                  <in:InfoMarquee Application="[Application]" />
                </Children>
              </Panel>

              <!-- Clock Display -->
              <Panel Name="ClockDisplay">
                <LayoutInput>
                  <FormLayoutInput Bottom="Parent,1,-13" Right="Parent,1,-50"/>
                </LayoutInput>
                <Children>
                  <Panel Layout="HorizontalFlow">
                    <Children>
                      <Text Name="TimeDisplay" Color="color://s:FontColorLight" Font="font://f:Vanilla_ClockFont" Visible="[Application.Config.ShowClock]" />
                    </Children>
                  </Panel>
                </Children>
              </Panel>
             
              <!-- Page Selector -->
              <pda:PageDetailArea Name="ViewPanel" Folder="[Folder]" Application="[Application]"  LayoutInput="[FullScreen]"/>

              <!-- Backdrop -->
              <Graphic Name="MainBG" Content="image://vi:BlankGraphic" Layout="Fill"/>
            </Children>
          </Clip>
        </Children>
      </Panel>
    </Content>
  </UI>

  <UI Name="TopBar">
    <Properties>
      <IntRangedValue Name="SortOrderIndex" MinValue ="0" MaxValue="999"/>
      <lib:FolderModel Name="Folder" FolderModel="$Required"/>
      <a:Application Name="Application" Application="$Required"/>
      <BooleanChoice Name="InFocus" BooleanChoice="$Required" />
      <ICommand Name="Views" ICommand="$Required"/>
      <ICommand Name="Sort"  ICommand="$Required"/>
      <ICommand Name="Index" ICommand="$Required"/>
    </Properties>

    <Locals>
      <Command Name="Configure" />
      <Command Name="PCUnlock"/>
      <Command Name="PCLock"/>
      <Command Name="CloseCommand" />
      
    </Locals>

    <Rules>
      <Default Target="[Input.MakeTopmostOnFocus]" Value="true"/>
      <Default Target="[Input.CreateInterestOnFocus]" Value="true" />

      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true"/>
          <Equality Source="[Application.Config.ShowConfigButton]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[ConfigBtn.Visible]" Value="true"/>
        </Actions>
      </Rule>
      <!--<Binding Source="[Folder.IsRoot]" Target="[ConfigBtn.Visible]"/>-->

      
      <Rule ConditionLogicalOp="And">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" ConditionOp="Equals" Value="true"/>
          <Equality Source="[Application.Config.EnableRootPage]" ConditionOp="Equals" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[ViewsBtn.Visible]" Value="false"/>
          <Set Target="[SortOrdersBtn.Visible]" Value="false"/>
          <Set Target="[IndexesBtn.Visible]" Value="false"/>      
        </Actions>
      </Rule>
      
      <!--<Binding Source="[Folder.IsRoot]" Target="[ViewsBtn.Visible]">
        <Transformer>
          <BooleanTransformer Inverse="true"/>
        </Transformer>
      </Binding>-->
      
      <!-- Sort and Index current values-->
      <!--<Binding Source="[Folder.DisplayPrefs.SortOrders.Chosen!cor:String]" Target="[SortOrdersBtn.Content]" />
      <Binding Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" Target="[IndexesBtn.Content]" />-->

      <!--<Condition Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" ConditionOp="Equals" SourceValue="none" Target="[SortOrdersBtn.Enabled]" Value="true"/>
      <Condition Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" ConditionOp="NotEquals" SourceValue="none" Target="[SortOrdersBtn.Enabled]" Value="false"/>-->

      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="true" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="false" />
        </Actions>
      </Rule>

      <!-- Go To Configuration Page -->
      <Changed Source="[Configure.Invoked]">
        <Actions>
          <Invoke Target="[Application.OpenConfiguration]" showFullOptions="true" />
        </Actions>
      </Changed>

      <!--<Changed Source="[RefocusViewTimer.Tick]">
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>-->

      <!--<Changed Source="[Folder.DisplayPrefs.ViewType.Chosen]" >
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>-->
      <!--<Changed Source="[Folder.DisplayPrefs.ViewType.Chosen]" >
        <Conditions>
          <Equality Source="[ViewConfig.Visible]" Value="true" />
        </Conditions>
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
          <Set Target="[ViewConfig.Visible]" Value="false"/>
          <Invoke Target="[ConfigurationMenu.NavigateInto]" />
        </Actions>
      </Changed>-->



      <Binding Source="[Application.Config.ParentalControlUnlocked]" Target="[PCLockBtn.Visible]"/>
      <Binding Source="[Application.Config.ParentalControlUnlocked]" Target="[PCUnlockBtn.Visible]">
        <Transformer>
          <BooleanTransformer Inverse="true"/>
        </Transformer>
      </Binding>

      <Changed Source="[PCUnlock.Invoked]">
        <Actions>
          <PlaySound Sound="sound://sounds:Miniselect" />
          <Invoke Target="[Application.UnlockPC]"/>
        </Actions>
      </Changed>

      <Changed Source="[PCLock.Invoked]">
        <Actions>
          <PlaySound Sound="sound://sounds:Miniselect" />
          <Invoke Target="[Application.RelockPC]"/>
        </Actions>
      </Changed>

      <Condition Source="[Folder.ItemTypeString]" ConditionOp="Equals" SourceValue="ArtistAlbum" Target="[ConfigurationMenu.Visible]" Value="false"/>
    </Rules>
    <Content>
      <Panel>
        <Children>
      <Graphic Name="TopConfigBar">
        <Layout>
          <FlowLayout Orientation="Vertical" ItemAlignment="Center" StripAlignment="Near" Spacing="10,10"/>
        </Layout>
        <Children>
          <!-- Configuration Buttons -->
          <Panel Name="ConfigurationMenu">
            <Layout>
              <FlowLayout Orientation="Horizontal" Spacing="10,10"/>
            </Layout>
            <Children>
              <vsb:SimpleButton Name="ConfigBtn"     ImageNoFocus="image://vi:MenuOptionConfiguration"  Command="[Configure]" Application="[Application]" Visible="false" />
              <vsb:SimpleButton Name="ViewsBtn"      ImageNoFocus="image://vi:MenuOptionViews"          Command="[Views]"     Application="[Application]" />
              <vsb:SimpleButton Name="SortOrdersBtn" ImageNoFocus="image://vi:MenuOptionSort"           Command="[Sort]"      Application="[Application]" />
              <vsb:SimpleButton Name="IndexesBtn"    ImageNoFocus="image://vi:MenuOptionIndex"          Command="[Index]"     Application="[Application]" />
              <vsb:SimpleButton Name="PCLockBtn"     ImageNoFocus="image://vi:MenuOptionPCLock"         Command="[PCLock]"    Application="[Application]" />
              <vsb:SimpleButton Name="PCUnlockBtn"   ImageNoFocus="image://vi:MenuOptionPCUnlock"       Command="[PCUnlock]"  Application="[Application]" />
            </Children>
          </Panel>
        </Children>
      </Graphic>
        </Children>
      </Panel>


    </Content>
  </UI>


  <UI Name="Wall">
    <Properties>
      <a:Application Name="Application" Application="$Required"/>
      <BooleanChoice Name="InFocus" BooleanChoice="$Required" />
    </Properties>

    <Locals>
      <Command Name="Configure" />
      <Command Name="PCUnlock"/>
      <Command Name="PCLock"/>
      <Command Name="CloseCommand" />

    </Locals>

    <Rules>
      <Default Target="[Input.MakeTopmostOnFocus]" Value="true"/>
      <Default Target="[Input.CreateInterestOnFocus]" Value="true" />
      
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="true" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="false" />
        </Actions>
      </Rule>

      <!-- Go To Configuration Page -->
      <Changed Source="[Configure.Invoked]">
        <Actions>
          <Invoke Target="[Application.OpenConfiguration]" showFullOptions="true" />
        </Actions>
      </Changed>
    </Rules>
    
    <Content>
      <vsb:SimpleButton Name="ConfigBtn"     ImageNoFocus="image://vi:MenuOptionConfiguration"  Command="[Configure]" Application="[Application]" />
    </Content>
  </UI>
</Mcml>
