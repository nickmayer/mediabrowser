<Mcml xmlns="http://schemas.microsoft.com/2006/mcml"
      xmlns:cor="assembly://MsCorLib/System"
	  xmlns:a="assembly://MediaBrowser/MediaBrowser"
    xmlns:lib="assembly://MediaBrowser/MediaBrowser.Library"
	  xmlns:s="file://Styles_DoNotEdit.mcml"
	  xmlns:f="file://Fonts_DoNotEdit.mcml"
	  xmlns:i="resx://MediaBrowser/MediaBrowser.Resources/Images"
		xmlns:vm="resx://MediaBrowser/MediaBrowser.Resources/ViewMenu"
	  xmlns:np="resx://MediaBrowser/MediaBrowser.Resources/NowPlayingViewport"
    xmlns:pci="resx://MediaBrowser/MediaBrowser.Resources/PCIndicatorButton"
	  xmlns:in="resx://MediaBrowser/MediaBrowser.Resources/InfoMarquee"
	  xmlns:pda="resx://MediaBrowser/MediaBrowser.Resources/PageDetailAreaDiamond"
    xmlns:me="Me"
      >


  <UI Name="PageDiamond">
    <Properties>
      <a:Application Name="Application" Application="$Required"/>
      <lib:FolderModel Name="Folder" FolderModel="$Required"/>
      <IntRangedValue Name="SortOrderIndex" MinValue ="0" MaxValue="999"/>

    </Properties>

    <Locals>
      <TypingHandler Name="TypingHandler" HandlerStage="Bubbled" TypingPolicy="TripleTap" >
        <EditableText>
          <EditableText Value="" />
        </EditableText>
      </TypingHandler>

      <cor:Boolean Name="CanPlay" Boolean="false" />
      <Timer Name="HideFindAsYouType" Interval="3000" AutoRepeat="false"/>
      <!--<Timer Name="BGTimer" Interval="100" Enabled="false"/>-->


      <!-- this timer is needed to ensure focus stas with the view properties when the viewType changes, doing it not via a timer doesn't always work-->
      <a:Clock Name="Clock"/>
      <KeyHandler Name="SwitchKey" Key="D8" Handle="false" Modifiers="Shift" HandlerStage="Bubbled"/>
      <BooleanChoice Name="TopBarHasFocus" Value="false" />

      <AnchorLayoutInput Name="LayoutTopBarShow" Top="Parent,0" Left="Parent,0" Right="Parent,1" Horizontal="Center" />
      <AnchorLayoutInput Name="LayoutTopBarHide" Left="Parent,0" Top="Parent,0,-100" Right="Parent,1" Horizontal="Center" />
      <!-- Navigate Timer to bypass view triggering -->
      <Timer Name="NavTimer" Interval="2000" AutoRepeat="false" Enabled="true"/>
      <Timer Name="RefocusTimer" Interval="200" AutoRepeat="false" Enabled="false"/>
    </Locals>

    <Rules>
      <!-- IsRootFolder-On, RootViewEnabled-False-->
      <Changed Source="[NavTimer.Tick]">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" Value="false"/>
          <Equality Source="[Application.Config.EnableRootPage]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.Visible]" Value="true" />
          <Set Target="[NavTimer.Enabled]" Value="false" />
        </Actions>
      </Changed>
      <!-- IsRootFolder-Off, RootViewEnabled-True-->
      <Changed Source="[NavTimer.Tick]">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" Value="false"/>
          <Equality Source="[Application.Config.EnableRootPage]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.Visible]" Value="true" />
          <Set Target="[NavTimer.Enabled]" Value="false" />
        </Actions>
      </Changed>
      <!-- IsRootFolder-True, RootViewEnabled-True-->
      <Changed Source="[NavTimer.Tick]">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" Value="true"/>
          <Equality Source="[Application.Config.EnableRootPage]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.Visible]" Value="false" />
          <Set Target="[NavTimer.Enabled]" Value="false" />
        </Actions>
      </Changed>
      <!-- IsRootFolder-True, RootViewEnabled-True-->
      <Changed Source="[NavTimer.Tick]">
        <Conditions>
          <Equality Source="[Folder.IsRoot]" Value="true"/>
          <Equality Source="[Application.Config.EnableRootPage]" Value="false"/>
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.Visible]" Value="true" />
          <Set Target="[NavTimer.Enabled]" Value="false" />
        </Actions>
      </Changed>

      <Changed Source="[RefocusTimer.Tick]">
        <Actions>
          <Set Target="[RefocusTimer.Enabled]" Value="false" />
          <Invoke Target="[ViewPanel.NavigateInto]" />
        </Actions>
      </Changed>

      <Rule>
        <Conditions>
          <Equality Source="[TopBarHasFocus.Value]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.LayoutInput]" Value="[LayoutTopBarShow]" />
        </Actions>
      </Rule>
      <Rule>
        <Conditions>
          <Equality Source="[TopBarHasFocus.Value]" ConditionOp="Equals" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[TheTopBar.LayoutInput]" Value="[LayoutTopBarHide]" />
        </Actions>
      </Rule>

      <Rule ConditionLogicalOp ="And">
        <Conditions >
          <Equality Source="[Folder.IsRoot]" Value="true"/>
          <Equality Source="[Application.Config.EnableRootPage]" Value="true"/>
        </Conditions>
        <Actions>
          <Set Target="[TimePanel.Visible]" Value="false" />
          <Set Target="[TheTopBar.Visible]" Value="false" />
          <Set Target="[NowPlaying.Visible]" Value="false"/>
          <Set Target="[Breadcrumbs.Visible]" Value="false"/>
          <Set Target="[BottomCenterInfoPanel.Visible]" Value="false"/>
        </Actions>
      </Rule>

      <Binding Source="[Clock.Time]" Target="[TimeDate.Content]">
        <Conditions>
          <Equality Source="[Application.Config.ShowClock]" ConditionOp="Equals" Value="true" />
        </Conditions>
      </Binding>

      <Rule>
        <Conditions>
          <Modified Source="[SwitchKey.Invoked]" />
        </Conditions>
        <Actions>
          <Invoke Target="[Folder.DisplayPrefs.ToggleViewTypes]" />
          <Set Target="[RefocusTimer.Enabled]" Value="true" />
        </Actions>
      </Rule>


      <!---->
      <!--
			<Rule>
				<Actions>
					<Set Target="[BGTimer.Enabled]" Value="true" />
				</Actions>
			</Rule>
			-->

      <!--<Rule>
				<Conditions>
					<Equality Source="[Folder.HasBannerImage]" ConditionOp="Equals" Value="false" />
				</Conditions>
				<Actions>
					<Set Target="[BreadCrumbs.Font]" Value="font://f:P_BreadcrumbFont" />
					<Set Target="[BreadCrumbs.Margins]" Value="0,20,0,0" />
				</Actions>
			</Rule>-->

      <!--<Rule ConditionLogicalOp="And">
				<Conditions>
					<Equality Source="[Folder.HasBannerImage]" ConditionOp="Equals" Value="false" />
					<Equality Source="[Application.BreadCrumbs]" ConditionOp="Equals" Value="" />
				</Conditions>
				<Actions>
					<Set Target="[BreadCrumbs.Content]" Value="video library" />
					<Set Target="[BreadCrumbs.Font]" Value="font://f:P_BreadcrumbFont" />
				</Actions>
			</Rule>-->

      <!--<Binding Source="[Folder.BannerImage]" Target="[BannerGraphic.Content]" />-->


      <Binding Source="[FindAsYouType.Content]" Target="[ShadowLabel.Content]" />
      <Binding Source="[TypingHandler.DisplayValue]" Target="[FindAsYouType.Content]" />
      <Binding Source="[TypingHandler.DisplayValue]" Target="[Folder.TripleTapSelect]" />

      <Changed Source="[TypingHandler.DisplayValue]">
        <Conditions>
          <Equality Source="[TypingHandler.DisplayValue]" ConditionOp="NotEquals" Value="" />
        </Conditions>
        <Actions>
          <Invoke Target="[HideFindAsYouType.Start]" />
        </Actions>
      </Changed>

      <Changed Source="[HideFindAsYouType.Tick]">
        <Actions>
          <Set Target="[TypingHandler.EditableText.Value]" Value="" />
        </Actions>
      </Changed>

      <Binding Source="[Application.ShowNowPlaying]" Target="[NowPlaying.Visible]" />
      <Binding Source="[Application.Config.TransparentBackground]" Target="[Overlay.Visible]">
        <Transformer>
          <BooleanTransformer Inverse="true"/>
        </Transformer>
      </Binding>

    </Rules>

    <Content>
      <Panel Layout="Form"  Navigation="RememberFocus">
        <Children>
          <Clip Layout="Form" Padding="[Application.Config.OverScanPadding]" Scale="[Application.Config.OverScanScaling]" CenterPointPercent="0.5,0.5,0.5">
            <Children>

              <me:TopBar Name="TheTopBar" Application="[Application]" Folder="[Folder]" InFocus="[TopBarHasFocus]" Visible="false">
                <LayoutInput>
                  <AnchorLayoutInput Left="Parent,0" Top="Parent,0,-100" Right="Parent,1" Horizontal="Center"/>
                </LayoutInput>
              </me:TopBar>


              <Panel Name="TimePanel">
                <Layout>
                  <FlowLayout Orientation="Horizontal" ItemAlignment="Center"/>
                </Layout>
                <LayoutInput>
                  <AnchorLayoutInput Left="Parent,0,50" Bottom="Parent,0,50" Right="Parent,0,125" Horizontal="Center"/>
                </LayoutInput>
                <Children>
                  <Panel Layout="Scale">
                    <Children>
                      <Text Name="TimeDate" Font="font://f:P_ClockFont"  Color="White"
                            Visible="[Application.Config.ShowClock]" />
                    </Children>
                  </Panel>
                </Children>
              </Panel>

              <!--Banner / Breadcrumbs -->
              <Panel Name="Breadcrumbs">
                <LayoutInput>
                  <AnchorLayoutInput Top="Parent, 0,50" Left="Parent, 0.5,-250" Right="Parent,.5,250" Horizontal="Center"  />
                </LayoutInput>
                <Children>
                  <Panel Layout="Scale">
                    <Children>
                      <Text Content="[Application.BreadCrumbs]" HorizontalAlignment="Center"
                            Font="Segoe Media Center, 18" Color="White" />
                    </Children>
                  </Panel>
                </Children>
              </Panel>

              <!--Information Panel Top Leftt-->
              <Panel Name="BottomCenterInfoPanel">
                <LayoutInput>
                  <AnchorLayoutInput Bottom="Parent, 1,-5" Left="Parent, 0.5,-300" Right="Parent,.5,300"  Horizontal="Center"/>
                </LayoutInput>
                <Children>
                  <in:InfoMarquee Application="[Application]" Color="55,55,55" />
                </Children>
              </Panel>

              <!-- find in list panel - highest Z-Order -->
              <Panel Name="FindAsYouTypePanel" >
                <LayoutInput>
                  <FormLayoutInput Bottom="Parent,1,-30" Right="Parent,1,-30"/>
                </LayoutInput>
                <Layout>
                  <FlowLayout ItemAlignment="Center"/>
                </Layout>
                <Children>
                  <ColorFill Content="Transparent" Padding="8,0,8,-3" Layout="Anchor">
                    <Children>
                      <Text Name="FindAsYouType" Font="font://f:P_FindAsYouTypeFont" Content="" Color="color://s:FontColorMedium"  />
                      <Text Name="ShadowLabel" Content="" Color="255, 0, 0, 0" Font="font://f:P_FindAsYouTypeFont">
                        <LayoutInput>
                          <AnchorLayoutInput Top="FindAsYouType, 0, 2" Left="FindAsYouType, 0, 2"/>
                        </LayoutInput>
                      </Text>
                    </Children>
                  </ColorFill>
                </Children>
              </Panel>


              <!--  View Details-->
              <pda:PageDetailAreaDiamond Name="ViewPanel" Folder="[Folder]" Application="[Application]"  >
                <LayoutInput>
                  <FormLayoutInput Left="Parent,.0" Top="Parent,0" Bottom="Parent,1" Right="Parent,1"/>
                </LayoutInput>
              </pda:PageDetailAreaDiamond>

              <!-- Now Playing View -->
              <np:NowPlayingViewport Name="NowPlaying">
                <LayoutInput>
                  <FormLayoutInput Left="Parent,0,10" Bottom="Parent,1,20" />
                </LayoutInput>
              </np:NowPlayingViewport>

              <Graphic Name="Overlay" Content="image://i:DiamondOverlayDarkAll">
                <LayoutInput>
                  <FormLayoutInput Left="Parent,0,-50" Top="Parent,0,-20" Bottom="Parent,1,10" Right="Parent,1,50"/>
                </LayoutInput>
              </Graphic>

            </Children>
          </Clip>

        </Children>
      </Panel>
    </Content>
  </UI>


  <UI Name="TopBar">
    <Properties>
      <IntRangedValue Name="SortOrderIndex" MinValue ="0" MaxValue="999"/>
      <lib:FolderModel Name="Folder" FolderModel="$Required"/>
      <a:Application Name="Application" Application="$Required"/>
      <BooleanChoice Name="InFocus" BooleanChoice="$Required" />
    </Properties>

    <Locals>
      <Command Name="Configure" />
      <Command Name="ShowViewConfiguration" />
      <Command Name="CloseViewConfiguration" />
      <Command Name="ShowSortConfiguration" />
      <Command Name="CloseSortConfiguration" />
      <Command Name="ShowIndexConfiguration" />
      <Command Name="CloseIndexConfiguration" />
      <Timer Name="RefocusViewTimer" AutoRepeat="false" Interval="320" />
    </Locals>

    <Rules>
      <Default Target="[Input.MakeTopmostOnFocus]" Value="true"/>
      <Default Target="[Input.CreateInterestOnFocus]" Value="true" />

      <Binding Source="[Folder.IsRoot]" Target="[ConfigBtn.Visible]"/>
      <!-- Sort and Index current values-->
      <Binding Source="[Folder.DisplayPrefs.SortOrders.Chosen!cor:String]" Target="[SortOrdersBtn.Content]" />
      <Binding Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" Target="[IndexesBtn.Content]" />

      <Condition Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" ConditionOp="Equals" SourceValue="none" Target="[SortOrdersBtn.Enabled]" Value="true"/>
      <Condition Source="[Folder.DisplayPrefs.IndexByChoice.Chosen!cor:String]" ConditionOp="NotEquals" SourceValue="none" Target="[SortOrdersBtn.Enabled]" Value="false"/>

      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="true" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="true" />
        </Actions>
      </Rule>
      <Rule ConditionLogicalOp="Or">
        <Conditions>
          <Equality Source="[Input.DeepKeyFocus]" ConditionOp="Equals" Value="false" />
        </Conditions>
        <Actions>
          <Set Target="[InFocus.Value]" Value="false" />
        </Actions>
      </Rule>

      <!-- Go To Configuration Page -->
      <Changed Source="[Configure.Invoked]">
        <Actions>
          <Invoke Target="[Application.OpenConfiguration]" showFullOptions="true" />
        </Actions>
      </Changed>

      <Changed Source="[RefocusViewTimer.Tick]">
        <Actions>
          <Invoke Target="[ViewConfig.NavigateInto]" />
        </Actions>
      </Changed>

      <!-- View Configuration Popup Panel -->
      <Changed Source="[ShowViewConfiguration.Invoked]">
        <Actions>
          <Set Target="[ViewConfig.Visible]" Value="true"/>
          <Set Target="[SortConfig.Visible]" Value="false"/>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[PopupContainer.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[CloseViewConfiguration.Invoked]">
        <Actions>
          <Set Target="[ViewConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[Folder.DisplayPrefs.ViewType.Chosen]" >
        <!--<Conditions>
          <Equality Source="[ViewConfig.Visible]" Value="true" />
        </Conditions>-->
        <Actions>
          <!-- <Invoke Target="[ViewConfig.NavigateInto]" />-->
          <Set Target="[ViewConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>

      <!-- Sort By Popup and Close -->
      <Changed Source="[ShowSortConfiguration.Invoked]">
        <Actions>
          <Set Target="[SortConfig.Visible]" Value="true"/>
          <Set Target="[ViewConfig.Visible]" Value="false"/>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[SortConfig.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[CloseSortConfiguration.Invoked]">
        <Actions>
          <Set Target="[SortConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[Folder.DisplayPrefs.SortOrders.Chosen]" >
        <Actions>
          <Set Target="[SortConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>

      <!-- Indexed By Open and Close Rules-->
      <Changed Source="[ShowIndexConfiguration.Invoked]">
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="true"/>
          <Set Target="[ViewConfig.Visible]" Value="false"/>
          <Set Target="[SortConfig.Visible]" Value="false"/>
          <Invoke Target="[IndexConfig.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[CloseIndexConfiguration.Invoked]">
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>
      <Changed Source="[Folder.DisplayPrefs.IndexByChoice.Chosen]" >
        <Actions>
          <Set Target="[IndexConfig.Visible]" Value="false"/>
          <Invoke Target="[MainContainer.NavigateInto]" />
        </Actions>
      </Changed>
    </Rules>
    <Content>

      <Graphic Name="TopConfigBar" Content="image://i:DiamondOverlayDarkTop" >
        <Layout>
          <FlowLayout Orientation="Vertical" ItemAlignment="Center" StripAlignment="Near" Spacing="10,10"/>
        </Layout>
        <LayoutInput>
          <AnchorLayoutInput Horizontal="Fill" Bottom="Parent,0,-50"/>
        </LayoutInput>
        <Children>
          <!-- Configuration Buttons -->
          <Panel Name="MainContainer">
            <Layout>
              <FlowLayout Orientation="Horizontal" ItemAlignment="Center" StripAlignment="Near" Spacing="10,10"/>
            </Layout>
            <Children>
              <vm:CfgButton Name="ConfigBtn" Command="[Configure]" />
              <vm:ViewsButton Name="ViewsBtn" Command="[ShowViewConfiguration]" Font="font://f:P_ConfigButtons" />
              <vm:ImgButton Name="SortOrdersBtn" Enabled="true" Command="[ShowSortConfiguration]" Image="image://i:SortImg"
                            Font="font://f:P_ConfigButtons" />
              <vm:ImgButton Name="IndexesBtn" Command="[ShowIndexConfiguration]" Image="image://i:IndexImg" Font="font://f:P_ConfigButtons" />
              <pci:PCIndicatorButton Application="[Application]" />
            </Children>
          </Panel>

          <!-- Configuration Panels -->
          <Panel Name="PopupContainer">
            <Layout>
              <FlowLayout Orientation="Horizontal" ItemAlignment="Center" StripAlignment="Near" Spacing="10,10"/>
            </Layout>
            <Children>
              <vm:ViewConfiguration Name="ViewConfig" Visible="false" Prefs="[Folder.DisplayPrefs]" Close="[CloseViewConfiguration]" />
              <vm:RadioConfiguration Name="SortConfig" Visible="false" Choice="[Folder.DisplayPrefs.SortOrders]" Close="[CloseSortConfiguration]" />
              <vm:RadioConfiguration Name="IndexConfig" Visible="false" Choice="[Folder.DisplayPrefs.IndexByChoice]" Close="[CloseIndexConfiguration]" />
            </Children>
          </Panel>

        </Children>
      </Graphic>
    </Content>
  </UI>

</Mcml>
